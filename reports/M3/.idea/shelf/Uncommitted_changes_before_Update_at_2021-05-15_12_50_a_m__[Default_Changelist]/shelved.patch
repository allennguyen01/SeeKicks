Index: Mobile Application/lambeosaurus/lib/main.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'dart:async';\r\nimport 'dart:io';\r\n\r\nimport 'package:camera/camera.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:google_fonts/google_fonts.dart';\r\nimport 'package:pytorch_mobile/pytorch_mobile.dart';\r\n\r\nFuture<void> main() async {\r\n  WidgetsFlutterBinding.ensureInitialized();\r\n\r\n  final cameras = await availableCameras();\r\n\r\n  final firstCamera = cameras.first;\r\n\r\n  runApp(\r\n    MaterialApp(\r\n      theme: ThemeData.dark(),\r\n      home: TakePictureScreen(\r\n        // Pass the appropriate camera to the TakePictureScreen widget.\r\n        camera: firstCamera,\r\n      ),\r\n    ),\r\n  );\r\n}\r\n\r\n// A screen that allows users to take a picture using a given camera.\r\nclass TakePictureScreen extends StatefulWidget {\r\n  final CameraDescription camera;\r\n\r\n  const TakePictureScreen({\r\n    Key key,\r\n    @required this.camera,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  TakePictureScreenState createState() => TakePictureScreenState();\r\n}\r\n\r\nclass TakePictureScreenState extends State<TakePictureScreen> {\r\n  CameraController _controller;\r\n  Future<void> _initializeControllerFuture;\r\n\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    // To display the current output from the Camera,\r\n    // create a CameraController.\r\n    _controller = CameraController(\r\n      // Get a specific camera from the list of available cameras.\r\n      widget.camera,\r\n      // Define the resolution to use.\r\n      ResolutionPreset.medium,\r\n    );\r\n\r\n    // Next, initialize the controller. This returns a Future.\r\n    _initializeControllerFuture = _controller.initialize();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    // Dispose of the controller when the widget is disposed.\r\n    _controller.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Model _imageModel = await PytorchMobile.loadModel('assets/models/custom_model.pt');\r\n    return Scaffold(\r\n      appBar: AppBar(title: Text('TEAM LAMBEOSAURUS',\r\n        style: GoogleFonts.raleway(\r\n          textStyle: TextStyle(color: Colors.black, letterSpacing: .5),\r\n        ),\r\n        textAlign: TextAlign.center,\r\n      ),\r\n        backgroundColor: Colors.lightBlue[50],),\r\n      backgroundColor: Colors.lightBlue[50],\r\n      // Wait until the controller is initialized before displaying the\r\n      // camera preview. Use a FutureBuilder to display a loading spinner\r\n      // until the controller has finished initializing.\r\n      body: FutureBuilder<void>(\r\n        future: _initializeControllerFuture,\r\n        builder: (context, snapshot) {\r\n          if (snapshot.connectionState == ConnectionState.done) {\r\n            // If the Future is complete, display the preview.\r\n            return CameraPreview(_controller);\r\n          } else {\r\n            // Otherwise, display a loading indicator.\r\n            return Center(child: CircularProgressIndicator());\r\n          }\r\n        },\r\n      ),\r\n      floatingActionButton: FloatingActionButton(\r\n        child: Icon(Icons.camera_alt_rounded),\r\n        backgroundColor: Colors.white,\r\n        // Provide an onPressed callback.\r\n        onPressed: () async {\r\n          // Take the Picture in a try / catch block. If anything goes wrong,\r\n          // catch the error.\r\n          try {\r\n            // Ensure that the camera is initialized.\r\n            await _initializeControllerFuture;\r\n\r\n            // Attempt to take a picture and get the file `image`\r\n            // where it was saved.\r\n            final image = await _controller.takePicture();\r\n\r\n            String prediction = await _imageModel.getImagePrediction(image, 224, 224, \"assets/labels/labels.csv\");\r\n            // If the picture was taken, display it on a new screen.\r\n            Navigator.push(\r\n              context,\r\n              MaterialPageRoute(\r\n                builder: (context) => DisplayPictureScreen(\r\n                  // Pass the automatically generated path to\r\n                  // the DisplayPictureScreen widget.\r\n                  imagePath: image?.path,\r\n                ),\r\n              ),\r\n            );\r\n          } catch (e) {\r\n            // If an error occurs, log the error to the console.\r\n            print(e);\r\n          }\r\n        },\r\n      ),\r\n      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,\r\n    );\r\n  }\r\n}\r\n\r\n// A widget that displays the picture taken by the user.\r\nclass DisplayPictureScreen extends StatelessWidget {\r\n  final String imagePath;\r\n\r\n  const DisplayPictureScreen({Key key, this.imagePath}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(title: Text('Display the Picture')),\r\n      // The image is stored as a file on the device. Use the `Image.file`\r\n      // constructor with the given path to display the image.\r\n      body: Image.file(File(imagePath)),\r\n    );\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Mobile Application/lambeosaurus/lib/main.dart	(revision 299be6f35340dc6dbf54271e8034a1b222a5ef2d)
+++ Mobile Application/lambeosaurus/lib/main.dart	(date 1620539528942)
@@ -67,7 +67,7 @@
 
   @override
   Widget build(BuildContext context) {
-    Model _imageModel = await PytorchMobile.loadModel('assets/models/custom_model.pt');
+    // Model _imageModel = await PyTorchMobile.loadModel('assets/models/custom_model.pt');
     return Scaffold(
       appBar: AppBar(title: Text('TEAM LAMBEOSAURUS',
         style: GoogleFonts.raleway(
@@ -107,7 +107,7 @@
             // where it was saved.
             final image = await _controller.takePicture();
 
-            String prediction = await _imageModel.getImagePrediction(image, 224, 224, "assets/labels/labels.csv");
+            // String prediction = await _imageModel.getImagePrediction(image, 224, 224, "assets/labels/labels.csv");
             // If the picture was taken, display it on a new screen.
             Navigator.push(
               context,
